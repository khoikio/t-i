package com.example.demo.bot;

import com.example.demo.ChatMessage;
import org.springframework.web.socket.WebSocketSession;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

public class SpamDetectionBot extends Bot {
    
    // Theo d√µi tin nh·∫Øn c·ªßa t·ª´ng user
    private Map<String, List<Long>> userMessageTimes = new ConcurrentHashMap<>();
    private Map<String, Integer> userSpamCount = new ConcurrentHashMap<>();
    
    // C√†i ƒë·∫∑t spam detection
    private static final int MAX_MESSAGES_PER_MINUTE = 5; // T·ªëi ƒëa 5 tin nh·∫Øn/ph√∫t
    private static final int SPAM_THRESHOLD = 3; // 3 l·∫ßn spam = c·∫£nh b√°o
    private static final long MINUTE_IN_MILLIS = 60 * 1000;
    
    public SpamDetectionBot() {
        super("SpamDetector", "Bot ph√°t hi·ªán v√† b√°o c√°o spam");
    }

    @Override
    public boolean canHandle(ChatMessage message) {
        // Bot n√†y x·ª≠ l√Ω t·∫•t c·∫£ tin nh·∫Øn ƒë·ªÉ detect spam
        return !message.getNickname().startsWith("ü§ñ");
    }

    @Override
    public ChatMessage processMessage(ChatMessage message, WebSocketSession session) {
        String username = message.getNickname();
        long currentTime = System.currentTimeMillis();
        
        // L·∫•y danh s√°ch th·ªùi gian tin nh·∫Øn c·ªßa user
        userMessageTimes.computeIfAbsent(username, k -> new ArrayList<>()).add(currentTime);
        
        // X√≥a tin nh·∫Øn c≈© h∆°n 1 ph√∫t
        List<Long> messageTimes = userMessageTimes.get(username);
        messageTimes.removeIf(time -> currentTime - time > MINUTE_IN_MILLIS);
        
        // Ki·ªÉm tra spam
        if (messageTimes.size() > MAX_MESSAGES_PER_MINUTE) {
            return handleSpamDetected(username, message.getRoom());
        }
        
        // Ki·ªÉm tra l·ªánh report spam
        if (message.getMessage().startsWith("/spam @")) {
            return handleSpamReport(message);
        }
        
        return null; // Kh√¥ng c√≥ response n·∫øu kh√¥ng ph√°t hi·ªán spam
    }
    
    private ChatMessage handleSpamDetected(String username, String room) {
        int spamCount = userSpamCount.getOrDefault(username, 0) + 1;
        userSpamCount.put(username, spamCount);
        
        String response;
        if (spamCount == 1) {
            response = String.format("‚ö†Ô∏è **C·∫¢NH B√ÅO SPAM**\n@%s ƒëang g·ª≠i tin nh·∫Øn qu√° nhanh! Vui l√≤ng ch·∫≠m l·∫°i. üêå", username);
        } else if (spamCount >= SPAM_THRESHOLD) {
            response = String.format("""
                üö® **B√ÅO C√ÅO SPAM NGHI√äM TR·ªåNG**
                User: @%s
                S·ªë l·∫ßn vi ph·∫°m: %d
                
                üì¢ ƒê√£ th√¥ng b√°o cho **Gi√°o vi√™n** v√† **Qu·∫£n tr·ªã vi√™n**!
                Y√™u c·∫ßu xem x√©t t·∫Øt ti·∫øng ho·∫∑c c·∫•m chat.
                """, username, spamCount);
        } else {
            response = String.format("‚ö†Ô∏è @%s ti·∫øp t·ª•c spam (%d/%d). H√£y ch√∫ √Ω!", username, spamCount, SPAM_THRESHOLD);
        }
        
        return createBotResponse(response, room);
    }
    
    private ChatMessage handleSpamReport(ChatMessage message) {
        // X·ª≠ l√Ω l·ªánh /spam @username
        String[] parts = message.getMessage().split("\\s+");
        if (parts.length < 2 || !parts[1].startsWith("@")) {
            return createBotResponse("‚ùå S·ª≠ d·ª•ng: `/spam @username` ƒë·ªÉ b√°o c√°o spam", message.getRoom());
        }
        
        String reportedUser = parts[1].substring(1); // B·ªè k√Ω t·ª± @
        String reporter = message.getNickname();
        
        String response = String.format("""
            üìã **B√ÅO C√ÅO SPAM**
            Ng∆∞·ªùi b√°o c√°o: @%s
            Ng∆∞·ªùi b·ªã b√°o c√°o: @%s
            
            ‚úÖ B√°o c√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn **Gi√°o vi√™n** v√† **Qu·∫£n tr·ªã vi√™n**.
            H·ªç s·∫Ω xem x√©t v√† x·ª≠ l√Ω ph√π h·ª£p.
            
            üí° Tip: B·∫°n c≈©ng c√≥ th·ªÉ s·ª≠ d·ª•ng `/report @user l√Ω_do` ƒë·ªÉ b√°o c√°o chi ti·∫øt h∆°n.
            """, reporter, reportedUser);
            
        return createBotResponse(response, message.getRoom());
    }
    
    // Ph∆∞∆°ng th·ª©c reset spam count (c√≥ th·ªÉ g·ªçi t·ª´ b√™n ngo√†i)
    public void resetSpamCount(String username) {
        userSpamCount.remove(username);
        userMessageTimes.remove(username);
    }
    
    // L·∫•y th√¥ng tin spam c·ªßa user
    public int getSpamCount(String username) {
        return userSpamCount.getOrDefault(username, 0);
    }
}

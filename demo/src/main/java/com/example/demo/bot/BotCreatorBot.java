package com.example.demo.bot;

import com.example.demo.ChatMessage;
import org.springframework.web.socket.WebSocketSession;

public class BotCreatorBot extends Bot {
    
    private BotManager botManager;
    
    public BotCreatorBot(BotManager botManager) {
        super("BotCreator", "Bot h·ªó tr·ª£ t·∫°o bot m·ªõi");
        this.botManager = botManager;
    }

    @Override
    public boolean canHandle(ChatMessage message) {
        String msg = message.getMessage().toLowerCase();
        return msg.startsWith("/create-bot") || msg.startsWith("/delete-bot") || 
               msg.startsWith("/list-bots") || msg.startsWith("/toggle-bot");
    }

    @Override
    public ChatMessage processMessage(ChatMessage message, WebSocketSession session) {
        String command = message.getMessage().trim();
        String userRole = getUserRole(message.getNickname());
        
        // Ch·ªâ admin v√† teacher m·ªõi c√≥ th·ªÉ qu·∫£n l√Ω bot
        if (!hasPermission(userRole)) {
            return createBotResponse(
                "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn qu·∫£n l√Ω bot. Ch·ªâ **Admin** v√† **Gi√°o vi√™n** m·ªõi c√≥ th·ªÉ t·∫°o/qu·∫£n l√Ω bot.", 
                message.getRoom()
            );
        }
        
        if (command.startsWith("/create-bot")) {
            return handleCreateBot(command, message.getNickname(), message.getRoom());
        } else if (command.startsWith("/delete-bot")) {
            return handleDeleteBot(command, message.getRoom());
        } else if (command.startsWith("/list-bots")) {
            return handleListBots(message.getRoom());
        } else if (command.startsWith("/toggle-bot")) {
            return handleToggleBot(command, message.getRoom());
        }
        
        return null;
    }
    
    private ChatMessage handleCreateBot(String command, String creator, String room) {
        String[] parts = command.split("\\s+", 3);
        if (parts.length < 3) {
            return createBotResponse(
                "‚ùå S·ª≠ d·ª•ng: `/create-bot <t√™n_bot> <m√¥_t·∫£>`\nV√≠ d·ª•: `/create-bot StudyHelper Bot h·ªó tr·ª£ h·ªçc t·∫≠p`", 
                room
            );
        }
        
        String botName = parts[1];
        String description = parts[2];
        
        // Ki·ªÉm tra t√™n bot h·ª£p l·ªá
        if (!botName.matches("^[a-zA-Z0-9_]+$")) {
            return createBotResponse(
                "‚ùå T√™n bot ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i, s·ªë v√† d·∫•u g·∫°ch d∆∞·ªõi!", 
                room
            );
        }
        
        boolean success = botManager.createCustomBot(botName, description, creator);
        
        if (success) {
            return createBotResponse(String.format("""
                ‚úÖ **BOT ƒê√É ƒê∆Ø·ª¢C T·∫†O TH√ÄNH C√îNG!**
                
                ü§ñ T√™n bot: %s
                üìù M√¥ t·∫£: %s
                üë®‚Äçüíº Ng∆∞·ªùi t·∫°o: @%s
                
                üí° **C√°ch s·ª≠ d·ª•ng:**
                ‚Ä¢ G·ªçi bot: `@%s` ho·∫∑c `/%s`
                ‚Ä¢ Bot s·∫Ω t·ª± ƒë·ªông ph·∫£n h·ªìi khi ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn
                ‚Ä¢ G√µ `/%s help` ƒë·ªÉ xem h∆∞·ªõng d·∫´n
                
                üîß **Qu·∫£n l√Ω bot:**
                ‚Ä¢ `/toggle-bot %s` - B·∫≠t/t·∫Øt bot
                ‚Ä¢ `/delete-bot %s` - X√≥a bot
                """, botName, description, creator, botName, botName.toLowerCase(), botName.toLowerCase(), botName, botName), room);
        } else {
            return createBotResponse(
                String.format("‚ùå Kh√¥ng th·ªÉ t·∫°o bot '%s'. Bot c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i!", botName), 
                room
            );
        }
    }
    
    private ChatMessage handleDeleteBot(String command, String room) {
        String[] parts = command.split("\\s+");
        if (parts.length < 2) {
            return createBotResponse("‚ùå S·ª≠ d·ª•ng: `/delete-bot <t√™n_bot>`", room);
        }
        
        String botName = parts[1];
        boolean success = botManager.removeBot(botName);
        
        if (success) {
            return createBotResponse(
                String.format("‚úÖ Bot '%s' ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!", botName), 
                room
            );
        } else {
            return createBotResponse(
                String.format("‚ùå Kh√¥ng th·ªÉ x√≥a bot '%s'. Bot c√≥ th·ªÉ kh√¥ng t·ªìn t·∫°i ho·∫∑c l√† bot h·ªá th·ªëng!", botName), 
                room
            );
        }
    }
    
    private ChatMessage handleListBots(String room) {
        var allBots = botManager.getAllBots();
        StringBuilder response = new StringBuilder();
        response.append("ü§ñ **DANH S√ÅCH T·∫§T C·∫¢ BOT:**\n\n");
        
        // Bot h·ªá th·ªëng
        response.append("üìã **Bot h·ªá th·ªëng:**\n");
        allBots.entrySet().stream()
            .filter(entry -> !(entry.getValue() instanceof BotManager.CustomBot))
            .forEach(entry -> {
                Bot bot = entry.getValue();
                String status = bot.isActive() ? "üü¢ Ho·∫°t ƒë·ªông" : "üî¥ T·∫Øt";
                response.append(String.format("‚Ä¢ %s - %s (%s)\n", bot.getBotName(), bot.getDescription(), status));
            });
        
        response.append("\nüé® **Bot t√πy ch·ªânh:**\n");
        boolean hasCustomBots = false;
        for (var entry : allBots.entrySet()) {
            Bot bot = entry.getValue();
            if (bot instanceof BotManager.CustomBot) {
                hasCustomBots = true;
                String status = bot.isActive() ? "üü¢ Ho·∫°t ƒë·ªông" : "üî¥ T·∫Øt";
                response.append(String.format("‚Ä¢ %s - %s (%s)\n", bot.getBotName(), bot.getDescription(), status));
            }
        }
        
        if (!hasCustomBots) {
            response.append("‚Ä¢ Ch∆∞a c√≥ bot t√πy ch·ªânh n√†o\n");
        }
        
        response.append("\nüí° **L·ªánh qu·∫£n l√Ω:**\n");
        response.append("‚Ä¢ `/create-bot <t√™n> <m√¥ t·∫£>` - T·∫°o bot m·ªõi\n");
        response.append("‚Ä¢ `/toggle-bot <t√™n>` - B·∫≠t/t·∫Øt bot\n");
        response.append("‚Ä¢ `/delete-bot <t√™n>` - X√≥a bot t√πy ch·ªânh");
        
        return createBotResponse(response.toString(), room);
    }
    
    private ChatMessage handleToggleBot(String command, String room) {
        String[] parts = command.split("\\s+");
        if (parts.length < 2) {
            return createBotResponse("‚ùå S·ª≠ d·ª•ng: `/toggle-bot <t√™n_bot>`", room);
        }
        
        String botName = parts[1];
        boolean success = botManager.toggleBot(botName);
        
        if (success) {
            Bot bot = botManager.getBot(botName);
            String status = bot.isActive() ? "b·∫≠t" : "t·∫Øt";
            return createBotResponse(
                String.format("‚úÖ Bot '%s' ƒë√£ ƒë∆∞·ª£c %s!", bot.getBotName(), status), 
                room
            );
        } else {
            return createBotResponse(
                String.format("‚ùå Kh√¥ng t√¨m th·∫•y bot '%s'!", botName), 
                room
            );
        }
    }
    
    private String getUserRole(String username) {
        if (username.equals("admin")) return "ADMIN";
        if (username.equals("teacher01")) return "TEACHER";
        if (username.startsWith("sv")) return "STUDENT";
        return "USER";
    }
    
    private boolean hasPermission(String role) {
        return "ADMIN".equals(role) || "TEACHER".equals(role);
    }
}
